name: Build and Scan Docker Images

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  AWS_REGION: eu-north-1
  FRONTEND_ECR_REPOSITORY: docker-frontend-db
  BACKEND_ECR_REPOSITORY: docker-backend-db

jobs:
  build-scan-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- Build Docker Images ---
      - name: Build backend Docker image
        run: docker build -t backend-image:latest ./backend

      - name: Build frontend Docker image
        run: docker build -t frontend-image:latest ./frontend

      # --- Scan Docker Images ---
      # - name: Scan backend Docker image with Trivy
      #   uses: aquasecurity/trivy-action@master
      #   continue-on-error: true
      #   with:
      #     image-ref: backend-image:latest
      #     format: table
      #     exit-code: 0
      #     severity: CRITICAL,HIGH

      # - name: Scan frontend Docker image with Trivy
      #   uses: aquasecurity/trivy-action@master
      #   continue-on-error: true
      #   with:
      #     image-ref: frontend-image:latest
      #     format: table
      #     exit-code: 0
      #     severity: CRITICAL,HIGH
     
      - name: Check AWS credentials are passed
        run: echo "${{ secrets.AWS_ACCESS_KEY_ID && secrets.AWS_SECRET_ACCESS_KEY != '' }}"
        
      # --- Configure AWS Credentials ---
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # --- Login to Amazon ECR ---
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # --- Tag and Push Backend Image ---
      - name: Tag and push backend image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag backend-image:latest $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG
          docker tag backend-image:latest $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:latest

      # --- Tag and Push Frontend Image ---
      - name: Tag and push frontend image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag frontend-image:latest $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG
          docker tag frontend-image:latest $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:latest
 # --- Terraform Init and Apply ---
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve
        
      - name: Capture EC2 IP from Terraform Output
        working-directory: ./terraform
        id: get_ip
        run: |
          EC2_IP=$(terraform output -raw ec2_public_ip)
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
          echo "Public IP: $EC2_IP"

      - name: Create Ansible Inventory File
        run: |
          echo "[ec2]" > ansible/inventory.ini
          echo "$EC2_IP ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> ansible/inventory.ini

      # --- Install Ansible ---
      - name: Set up Python for Ansible
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      # --- Run Ansible Playbook ---
      - name: Run Ansible Playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
        working-directory: ./ansible
        run: |
          ansible-playbook -i inventory.ini playbook.yml
